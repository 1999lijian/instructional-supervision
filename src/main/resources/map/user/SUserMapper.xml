<?xml version="1.0" encoding="UTF8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.L.mapper.user.SUserMapper">

    <resultMap id="SUserMap" type="com.L.entity.user.SUser">
        <id property="sId" column="sId"></id>
        <result property="suid" column="suid"></result>
        <result property="sNo" column="sNo"></result>
        <result property="sName" column="sName"></result>
        <result property="sSex" column="sSex"></result>
        <result property="sDate" column="sDate"></result>
        <result property="sCollegeNo" column="sCollegeNo"></result>
        <result property="sPhone" column="sPhone"></result>
        <result property="sEmail" column="sEmail"></result>
        <result property="sQQ" column="sQQ"></result>
        <result property="sNotes" column="sNotes"></result>

        <association property="uUser" javaType="com.L.entity.user.UUser">
            <id property="uId" column="uId"></id>
            <result property="uName" column="uName"></result>
            <result property="uPassword" column="uPassword"></result>
            <result property="uRoleNo" column="uRoleNo"></result>
        </association>
        <association property="college" javaType="com.L.entity.general.College">
            <id property="collegeId" column="collegeId"></id>
            <result property="collegeName" column="collegeName"></result>
        </association>
    </resultMap>


    <update id="updateSUser">

        update s_user,
            u_user
        set
            uPassword=#{uUser.uPassword},
            sNo=#{sNo},
            sName=#{sName}, sSex=#{sSex}, sDate=#{sDate},
            sCollegeNo=#{sCollegeNo}, sPhone=#{sPhone}, sEmail=#{sEmail}, sQQ=#{sQQ}, sNotes=#{sNotes}
        where u_user.uId = #{suid}
          and sId=#{sId}

    </update>


    <select id="updateSUserId" resultMap="SUserMap">
        select *
        from s_user,
             u_user
        where s_user.suid = u_user.uId
          and s_user.sid = #{tid}

    </select>

    <!--  SELECT LAST_INSERT_ID()  获取最后插入的数据的自增主键值  -->
    <insert id="addSUser">
        INSERT INTO s_user (suid, sNo, sName, sSex, sDate, sCollegeNo, sPhone, sEmail, sQQ,
                            sNotes)
        VALUES ((SELECT LAST_INSERT_ID()), #{sNo}, #{sName}, #{sSex}, #{sDate},
                #{sCollegeNo}, #{sPhone}, #{sEmail},
                #{sQQ}, #{sNotes})
    </insert>

    <insert id="addAll">
        INSERT INTO u_user (uName, uPassword, uRoleNo)
        VALUES (#{uName}, #{uPassword}, #{uRoleNo})
    </insert>


    <insert id="addSUserList">
        INSERT INTO s_user (suid, sNo, sName)
        VALUES (#{suid}, #{sNo}, #{sName})
        <selectKey keyProperty="sId" resultType="java.lang.Integer" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>


    <insert id="addAllList">
        INSERT INTO u_user (uName, uPassword, uRoleNo)
        VALUES (#{uName}, #{uPassword}, #{uRoleNo})
        <selectKey keyProperty="uId" resultType="java.lang.Integer" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>


    <!--      INNER JOIN : 用于将两个表中的匹配行连接在一起。
    它根据两个表之间的共同列进行连接，并返回满足连接条件的结果集。  -->
    <delete id="deleteSUserId">

        delete
        s_user,u_user,class_student
        from s_user
        INNER JOIN u_user ON suid = uId
INNER JOIN class_student ON sId = sIdsc
        where sId =
        #{sId}

    </delete>

    <!--  count(*): 用于计算指定表中的行数。它返回一个表示表中行数的整数值-->
    <select id="countSUser" resultType="java.lang.Integer">

        select count(*)
        from s_user
    </select>


    <select id="countSUserAll" resultType="java.lang.Integer">

        SELECT COUNT(*)
        FROM s_user
        WHERE sName LIKE CONCAT('%', #{sName}, '%')  </select>


    <!--
    order by uid asc: 用于按照 "uid" 列的值升序对结果集进行排序
      limit : 限制结果集返回的行数的关键字
    -->
    <select id="findAllSUserList" resultMap="SUserMap">
        select sId,
               uPassword,
               sNo,
               sName,
               sSex,
               sDate,
               college.collegeName,
               sPhone,
               sEmail,
               sQQ,
               sNotes
        from s_user,
             u_user,
             college
        where uId = suid
          and s_user.sCollegeNo = college.collegeId
        order by uid asc
            limit #{startIndex}, #{pageSize}
    </select>
    <select id="findAllCollege" resultType="com.L.entity.general.College">
        select *
        from college
    </select>

    <select id="findAllClass" resultType="com.L.entity.classes.ClassST">
        select *
        from classst
    </select>

</mapper>




